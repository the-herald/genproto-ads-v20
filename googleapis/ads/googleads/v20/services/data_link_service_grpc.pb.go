// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: google/ads/googleads/v20/services/data_link_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataLinkService_CreateDataLink_FullMethodName = "/google.ads.googleads.v20.services.DataLinkService/CreateDataLink"
	DataLinkService_RemoveDataLink_FullMethodName = "/google.ads.googleads.v20.services.DataLinkService/RemoveDataLink"
	DataLinkService_UpdateDataLink_FullMethodName = "/google.ads.googleads.v20.services.DataLinkService/UpdateDataLink"
)

// DataLinkServiceClient is the client API for DataLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service allows management of data links between  a Google
// Ads customer and another data entity.
type DataLinkServiceClient interface {
	// Creates a data link. The requesting Google Ads account name and account ID
	// will be shared with the third party (such as YouTube creators for video
	// links) to whom you are creating the link with. Only customers on the
	// allow-list can create data links.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [DatabaseError]()
	//   [DataLinkError]()
	//   [FieldError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [MutateError]()
	//   [QuotaError]()
	//   [RequestError]()
	CreateDataLink(ctx context.Context, in *CreateDataLinkRequest, opts ...grpc.CallOption) (*CreateDataLinkResponse, error)
	// Remove a data link.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [DatabaseError]()
	//   [DataLinkError]()
	//   [FieldError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [MutateError]()
	//   [QuotaError]()
	//   [RequestError]()
	RemoveDataLink(ctx context.Context, in *RemoveDataLinkRequest, opts ...grpc.CallOption) (*RemoveDataLinkResponse, error)
	// Update a data link.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [DatabaseError]()
	//   [DataLinkError]()
	//   [FieldError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [MutateError]()
	//   [QuotaError]()
	//   [RequestError]()
	UpdateDataLink(ctx context.Context, in *UpdateDataLinkRequest, opts ...grpc.CallOption) (*UpdateDataLinkResponse, error)
}

type dataLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataLinkServiceClient(cc grpc.ClientConnInterface) DataLinkServiceClient {
	return &dataLinkServiceClient{cc}
}

func (c *dataLinkServiceClient) CreateDataLink(ctx context.Context, in *CreateDataLinkRequest, opts ...grpc.CallOption) (*CreateDataLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDataLinkResponse)
	err := c.cc.Invoke(ctx, DataLinkService_CreateDataLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLinkServiceClient) RemoveDataLink(ctx context.Context, in *RemoveDataLinkRequest, opts ...grpc.CallOption) (*RemoveDataLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDataLinkResponse)
	err := c.cc.Invoke(ctx, DataLinkService_RemoveDataLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataLinkServiceClient) UpdateDataLink(ctx context.Context, in *UpdateDataLinkRequest, opts ...grpc.CallOption) (*UpdateDataLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDataLinkResponse)
	err := c.cc.Invoke(ctx, DataLinkService_UpdateDataLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataLinkServiceServer is the server API for DataLinkService service.
// All implementations must embed UnimplementedDataLinkServiceServer
// for forward compatibility.
//
// This service allows management of data links between  a Google
// Ads customer and another data entity.
type DataLinkServiceServer interface {
	// Creates a data link. The requesting Google Ads account name and account ID
	// will be shared with the third party (such as YouTube creators for video
	// links) to whom you are creating the link with. Only customers on the
	// allow-list can create data links.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [DatabaseError]()
	//   [DataLinkError]()
	//   [FieldError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [MutateError]()
	//   [QuotaError]()
	//   [RequestError]()
	CreateDataLink(context.Context, *CreateDataLinkRequest) (*CreateDataLinkResponse, error)
	// Remove a data link.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [DatabaseError]()
	//   [DataLinkError]()
	//   [FieldError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [MutateError]()
	//   [QuotaError]()
	//   [RequestError]()
	RemoveDataLink(context.Context, *RemoveDataLinkRequest) (*RemoveDataLinkResponse, error)
	// Update a data link.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [DatabaseError]()
	//   [DataLinkError]()
	//   [FieldError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [MutateError]()
	//   [QuotaError]()
	//   [RequestError]()
	UpdateDataLink(context.Context, *UpdateDataLinkRequest) (*UpdateDataLinkResponse, error)
	mustEmbedUnimplementedDataLinkServiceServer()
}

// UnimplementedDataLinkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataLinkServiceServer struct{}

func (UnimplementedDataLinkServiceServer) CreateDataLink(context.Context, *CreateDataLinkRequest) (*CreateDataLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataLink not implemented")
}
func (UnimplementedDataLinkServiceServer) RemoveDataLink(context.Context, *RemoveDataLinkRequest) (*RemoveDataLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDataLink not implemented")
}
func (UnimplementedDataLinkServiceServer) UpdateDataLink(context.Context, *UpdateDataLinkRequest) (*UpdateDataLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataLink not implemented")
}
func (UnimplementedDataLinkServiceServer) mustEmbedUnimplementedDataLinkServiceServer() {}
func (UnimplementedDataLinkServiceServer) testEmbeddedByValue()                         {}

// UnsafeDataLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataLinkServiceServer will
// result in compilation errors.
type UnsafeDataLinkServiceServer interface {
	mustEmbedUnimplementedDataLinkServiceServer()
}

func RegisterDataLinkServiceServer(s grpc.ServiceRegistrar, srv DataLinkServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataLinkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataLinkService_ServiceDesc, srv)
}

func _DataLinkService_CreateDataLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLinkServiceServer).CreateDataLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLinkService_CreateDataLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLinkServiceServer).CreateDataLink(ctx, req.(*CreateDataLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLinkService_RemoveDataLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDataLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLinkServiceServer).RemoveDataLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLinkService_RemoveDataLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLinkServiceServer).RemoveDataLink(ctx, req.(*RemoveDataLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataLinkService_UpdateDataLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataLinkServiceServer).UpdateDataLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataLinkService_UpdateDataLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataLinkServiceServer).UpdateDataLink(ctx, req.(*UpdateDataLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataLinkService_ServiceDesc is the grpc.ServiceDesc for DataLinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataLinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.googleads.v20.services.DataLinkService",
	HandlerType: (*DataLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataLink",
			Handler:    _DataLinkService_CreateDataLink_Handler,
		},
		{
			MethodName: "RemoveDataLink",
			Handler:    _DataLinkService_RemoveDataLink_Handler,
		},
		{
			MethodName: "UpdateDataLink",
			Handler:    _DataLinkService_UpdateDataLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/googleads/v20/services/data_link_service.proto",
}
