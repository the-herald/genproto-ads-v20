// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: google/ads/googleads/v20/services/customer_conversion_goal_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CustomerConversionGoalService_MutateCustomerConversionGoals_FullMethodName = "/google.ads.googleads.v20.services.CustomerConversionGoalService/MutateCustomerConversionGoals"
)

// CustomerConversionGoalServiceClient is the client API for CustomerConversionGoalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to manage customer conversion goal.
type CustomerConversionGoalServiceClient interface {
	// Creates, updates or removes customer conversion goals. Operation statuses
	// are returned.
	MutateCustomerConversionGoals(ctx context.Context, in *MutateCustomerConversionGoalsRequest, opts ...grpc.CallOption) (*MutateCustomerConversionGoalsResponse, error)
}

type customerConversionGoalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerConversionGoalServiceClient(cc grpc.ClientConnInterface) CustomerConversionGoalServiceClient {
	return &customerConversionGoalServiceClient{cc}
}

func (c *customerConversionGoalServiceClient) MutateCustomerConversionGoals(ctx context.Context, in *MutateCustomerConversionGoalsRequest, opts ...grpc.CallOption) (*MutateCustomerConversionGoalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutateCustomerConversionGoalsResponse)
	err := c.cc.Invoke(ctx, CustomerConversionGoalService_MutateCustomerConversionGoals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerConversionGoalServiceServer is the server API for CustomerConversionGoalService service.
// All implementations must embed UnimplementedCustomerConversionGoalServiceServer
// for forward compatibility.
//
// Service to manage customer conversion goal.
type CustomerConversionGoalServiceServer interface {
	// Creates, updates or removes customer conversion goals. Operation statuses
	// are returned.
	MutateCustomerConversionGoals(context.Context, *MutateCustomerConversionGoalsRequest) (*MutateCustomerConversionGoalsResponse, error)
	mustEmbedUnimplementedCustomerConversionGoalServiceServer()
}

// UnimplementedCustomerConversionGoalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerConversionGoalServiceServer struct{}

func (UnimplementedCustomerConversionGoalServiceServer) MutateCustomerConversionGoals(context.Context, *MutateCustomerConversionGoalsRequest) (*MutateCustomerConversionGoalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateCustomerConversionGoals not implemented")
}
func (UnimplementedCustomerConversionGoalServiceServer) mustEmbedUnimplementedCustomerConversionGoalServiceServer() {
}
func (UnimplementedCustomerConversionGoalServiceServer) testEmbeddedByValue() {}

// UnsafeCustomerConversionGoalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerConversionGoalServiceServer will
// result in compilation errors.
type UnsafeCustomerConversionGoalServiceServer interface {
	mustEmbedUnimplementedCustomerConversionGoalServiceServer()
}

func RegisterCustomerConversionGoalServiceServer(s grpc.ServiceRegistrar, srv CustomerConversionGoalServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerConversionGoalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerConversionGoalService_ServiceDesc, srv)
}

func _CustomerConversionGoalService_MutateCustomerConversionGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateCustomerConversionGoalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerConversionGoalServiceServer).MutateCustomerConversionGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerConversionGoalService_MutateCustomerConversionGoals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerConversionGoalServiceServer).MutateCustomerConversionGoals(ctx, req.(*MutateCustomerConversionGoalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerConversionGoalService_ServiceDesc is the grpc.ServiceDesc for CustomerConversionGoalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerConversionGoalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.googleads.v20.services.CustomerConversionGoalService",
	HandlerType: (*CustomerConversionGoalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MutateCustomerConversionGoals",
			Handler:    _CustomerConversionGoalService_MutateCustomerConversionGoals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/googleads/v20/services/customer_conversion_goal_service.proto",
}
